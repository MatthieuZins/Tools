#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan  3 10:13:12 2019

@author: matthieu
"""

import numpy as np
from detect_frustrums import get_rotation_around_axis
import glob
import os


# transforms generated by the SLAM
transforms_file = "/home/matthieu/Dev/VeloView-kwinternal/transforms_47.csv"

# load transforms (3x4)
with open(transforms_file, "r") as fin:
    lines = fin.readlines()
transforms = [np.eye(4)[:3, :]]
for i in range(1, len(lines)):      # skip the first line
    if len(lines[i]) > 0:
        temp = list(map(float, lines[i].split(",")))
        t = temp[0]
        roll = temp[1]
        pitch = temp[2]
        yaw = temp[3]
        x = temp[-3]
        y = temp[-2]
        z = temp[-1]
    rx = get_rotation_around_axis(roll, "x")
    ry = get_rotation_around_axis(pitch, "y")
    rz = get_rotation_around_axis(yaw, "z")
    R = rz @ ry @ rx
    T = np.hstack((R, np.array([[x, y, z]]).reshape((3, 1))))
    transforms.append(T)


#pc_list = glob.glob("/media/matthieu/DATA/KITTI/fixed/2011_09_28_drive_0017_sync/velodyne_points/data/*.bin")
pc_list = glob.glob("/media/matthieu/DATA/KITTI/fixed/2011_09_28_drive_0054_sync/velodyne_points/data/*.bin")
#pc_list = glob.glob("/media/matthieu/DATA/KITTI/fixed/2011_09_26_drive_0060_sync/velodyne_points/data/*.bin")


pc_list = sorted(pc_list)
pc_names = []
for f in pc_list:
    pc_names.append(os.path.splitext(os.path.basename(f))[0])

voxel_grid_scale = 10       # 1 means meters, 10 means dm, ...
grid = {}
for i, pc_file in enumerate(pc_list[:-1]):
    print("pointcloud ", i)
    # load point cloud
    pts = np.fromfile(pc_file, np.float32, -1).reshape((-1, 4))
    pts = pts[:, :3]

    # transform points
    # comment the two following lines when the car is not moving
#    pts = transforms[i][:, :3] @ pts.T + transforms[i][:, 3].reshape((3, 1))
#    pts = pts.T

    pts = np.round(pts * voxel_grid_scale).astype(int)
    for p in pts:
        s = "|".join(p.astype(str))
        if s in grid.keys():
            grid[s].append(i)
        else:
            grid[s] = [i]

#%%
with open("moving_objects.obj", "w") as fout:
    for key in grid:
        pt = list(map(lambda x: float(x)/voxel_grid_scale, key.split("|")))
        timestamps = grid[key]
#        robust = []
#        for k in timestamps:
#            if timestamps.count(k) > 2:
#                if robust.count(k) == 0:
#                    robust.append(k)
#        if len(robust) > 0:
#            mi = min(robust)
#            ma = max(robust)
#            if ma - mi < 10:
#                fout.write("v " + " ".join(map(str, pt)) + "\n")
#        fout.write("v " + " ".join(map(str, pt)) + "\n")

        if max(timestamps) - min(timestamps) < 5:
#            if pt[2] > -10:
            fout.write("v " + " ".join(map(str, pt)) + "\n")


with open("moving_objects.csv", "w") as fout:
    fout.write("x, y, z, n\n")
    for key in grid:
        pt = list(map(lambda x: float(x)/voxel_grid_scale, key.split("|")))
        timestamps = grid[key]
#        robust = []
#        for k in timestamps:
#            if timestamps.count(k) > 2:
#                if robust.count(k) == 0:
#                    robust.append(k)
#        if len(robust) > 0:
#            mi = min(robust)
#            ma = max(robust)
#            if ma - mi < 10:
#                fout.write("v " + " ".join(map(str, pt)) + "\n")
#        fout.write("v " + " ".join(map(str, pt)) + "\n")

        n = max(timestamps) - min(timestamps)
        fout.write(", ".join(map(str, pt)) + ",  " + str(n) + "\n")
